from Crypto.Util.number import long_to_bytes, bytes_to_long

def load_fault_messages(filepath: str) -> list[int]:
    lines = open(filepath, "r").readlines()
    messages = list(map(lambda line: int(line), lines))
    return messages

# RSA 파라미터 (공개키, 개인키))
(N, e), d = (98639350158287747956171614024858003106737929785723376047985588489903225031675238942280563373940905701931651170379361219551278894213021434648783114473246721338107200738833103695814346217200966617698677137725683746838186561756004241774294434212453862492176950276330700287348945941127494562176214125995218765677, 0x10001), None

# 평문, 암호문
M = 8684345636908686698383058753930515845376216074491905095625386038921316376845905096948974184280037158397773209920391529649784574906985754450477350014610356222003127212466169135522169279492231954962510144676909892095883819057606351964935618910468692572435658048566378696492965708241737271579660195263078472751
C = 374015834710561043810344051134135

# e값 추측에 대한 검증
# M^e mod N 이 C와 동일하면 정확한 추측으로 판정
assert pow(M, e, N) == C

# 오류 메세지 및 오류 위치 정보
# 처리에 용이하게 (오류 메세지, 오류 위치) 형태로 변환
fault_messages = load_fault_messages('./fault_message.txt')
fault_index = [5, 11, 18, 24, 30, 37, 43, 51, 57, 63, 70, 78, 84, 90, 98, 105, 112, 120, 125, 131, 137, 144, 150, 156, 161, 169, 176, 180, 187, 193, 201, 205, 212, 220, 228, 235, 239, 246, 252, 258, 265, 269, 277, 283, 290, 295, 301, 307, 311, 318, 326, 330, 337, 345, 353, 360, 365, 370, 377, 383, 389, 397, 405, 409, 413, 421, 429, 433, 441, 446, 454, 461, 468, 476, 483, 490, 497, 504, 510, 517, 524, 531, 538, 546, 551, 559, 562, 569, 577, 584, 590, 596, 599, 606, 609, 617, 624, 631, 638, 642, 648, 653, 658, 662, 670, 676, 681, 689, 693, 700, 708, 716, 723, 730, 738, 746, 753, 758, 763, 769, 778, 784, 790, 796, 804, 812, 819, 826, 831, 838, 844, 850, 858, 865, 869, 876, 883, 890, 897, 903, 910, 917, 925, 932, 939, 945, 950, 954, 959, 963, 969, 976, 983, 989, 993, 998, 1005, 1010, 1016, 1021]
faults = zip(fault_messages, fault_index)

